/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type TeamMember = {
  _id: string;
  _type: "teamMember";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  role?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  email?: string;
  linkedin?: string;
  github?: string;
  year?: "2024" | "2025" | "2026";
  category?: "core" | "junior";
  order?: number;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Gallery = {
  _id: string;
  _type: "gallery";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  category?: "Hackathons" | "Workshops" | "Activities" | "Competitions" | "Seminars";
  tags?: Array<string>;
  date?: string;
  publishedAt?: string;
};

export type Event = {
  _id: string;
  _type: "event";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  category?: "Workshop" | "Competition" | "Talk" | "Meetup";
  tags?: Array<string>;
  date?: string;
  venue?: string;
  registrationLink?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  publishedAt?: string;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  tags?: Array<string>;
  githubUrl?: string;
  liveUrl?: string;
  publishedAt?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  tags?: Array<string>;
  publishedAt?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = TeamMember | Category | Gallery | Event | Project | Post | Author | BlockContent | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug][0] {    _id,    title,    description,    "coverImage": mainImage.asset->url,    "date": publishedAt,    author->{name, "picture": image.asset->url},    "body": body[]{..., _type == "image" => {"url": asset->url}},    "slug": slug.current,    "tags": tags,  }
export type PostQueryResult = {
  _id: string;
  title: string | null;
  description: string | null;
  coverImage: string | null;
  date: string | null;
  author: {
    name: string | null;
    picture: string | null;
  } | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
    url: string | null;
  }> | null;
  slug: string | null;
  tags: Array<string> | null;
} | null;
// Variable: moreBlogsQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)] | order(publishedAt desc, _updatedAt desc) [0...$limit] {    title,    "slug": slug.current,    "imageUrl": mainImage.asset->url,    "date": publishedAt,    author->{name, "picture": image.asset->url},    "description": description,    "tags": tags,  }
export type MoreBlogsQueryResult = Array<{
  title: string | null;
  slug: string | null;
  imageUrl: string | null;
  date: string | null;
  author: {
    name: string | null;
    picture: string | null;
  } | null;
  description: string | null;
  tags: Array<string> | null;
}>;
// Variable: postsQuery
// Query: *[_type == "post" && defined(slug.current)] | order(publishedAt desc, _updatedAt desc) {  _id,  title,  description,  "slug": slug.current,  "tags": tags,  "date": publishedAt,  author->{name},  "imageUrl": mainImage.asset->url,}
export type PostsQueryResult = Array<{
  _id: string;
  title: string | null;
  description: string | null;
  slug: string | null;
  tags: Array<string> | null;
  date: string | null;
  author: {
    name: string | null;
  } | null;
  imageUrl: string | null;
}>;
// Variable: postSlugsQuery
// Query: *[_type == "post" && defined(slug.current)]{ "slug": slug.current }
export type PostSlugsQueryResult = Array<{
  slug: string | null;
}>;
// Variable: projectQuery
// Query: *[_type == "project" && slug.current == $slug][0] {    _id,    title,    description,    "coverImage": mainImage.asset->url,    "date": publishedAt,    author->{name, "picture": image.asset->url},    "body": body[]{..., _type == "image" => {"url": asset->url}},    "slug": slug.current,    "tags": tags,    githubUrl,    liveUrl  }
export type ProjectQueryResult = {
  _id: string;
  title: string | null;
  description: string | null;
  coverImage: string | null;
  date: string | null;
  author: {
    name: string | null;
    picture: string | null;
  } | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
    url: string | null;
  }> | null;
  slug: string | null;
  tags: Array<string> | null;
  githubUrl: string | null;
  liveUrl: string | null;
} | null;
// Variable: moreProjectsQuery
// Query: *[_type == "project" && _id != $skip && defined(slug.current)] | order(publishedAt desc, _updatedAt desc) [0...$limit] {    title,    "slug": slug.current,    "imageUrl": mainImage.asset->url,    "date": publishedAt,    author->{name, "picture": image.asset->url},    "description": description,    "tags": tags,  }
export type MoreProjectsQueryResult = Array<{
  title: string | null;
  slug: string | null;
  imageUrl: string | null;
  date: string | null;
  author: {
    name: string | null;
    picture: string | null;
  } | null;
  description: string | null;
  tags: Array<string> | null;
}>;
// Variable: projectsQuery
// Query: *[_type == "project" && defined(slug.current)] | order(publishedAt desc, _updatedAt desc) {  _id,  title,  description,  "slug": slug.current,  "tags": tags,  "date": publishedAt,  author->{name},  "imageUrl": mainImage.asset->url,}
export type ProjectsQueryResult = Array<{
  _id: string;
  title: string | null;
  description: string | null;
  slug: string | null;
  tags: Array<string> | null;
  date: string | null;
  author: {
    name: string | null;
  } | null;
  imageUrl: string | null;
}>;
// Variable: projectSlugsQuery
// Query: *[_type == "project" && defined(slug.current)]{ "slug": slug.current }
export type ProjectSlugsQueryResult = Array<{
  slug: string | null;
}>;
// Variable: eventQuery
// Query: *[_type == "event" && slug.current == $slug][0] {    _id,    title,    description,    "slug": slug.current,    author-> {      name,      "picture": picture.asset->url    },    "imageUrl": mainImage.asset->url,    category,    tags,    date,    venue,    registrationLink,    body,    publishedAt  }
export type EventQueryResult = {
  _id: string;
  title: string | null;
  description: string | null;
  slug: string | null;
  author: {
    name: string | null;
    picture: null;
  } | null;
  imageUrl: string | null;
  category: "Competition" | "Meetup" | "Talk" | "Workshop" | null;
  tags: Array<string> | null;
  date: string | null;
  venue: string | null;
  registrationLink: string | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  publishedAt: string | null;
} | null;
// Variable: moreEventsQuery
// Query: *[_type == "event" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {    _id,    title,    "slug": slug.current,    "imageUrl": mainImage.asset->url,    description,    date,    author-> {      name,      "picture": picture.asset->url    }  }
export type MoreEventsQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  imageUrl: string | null;
  description: string | null;
  date: string | null;
  author: {
    name: string | null;
    picture: null;
  } | null;
}>;
// Variable: eventsQuery
// Query: *[_type == "event" && defined(slug.current)] | order(date desc, _updatedAt desc) {    _id,    title,    "slug": slug.current,    "imageUrl": mainImage.asset->url,    description,    tags,    date,    author-> {      name,      "picture": picture.asset->url    },    category,    venue,    registrationLink  }
export type EventsQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  imageUrl: string | null;
  description: string | null;
  tags: Array<string> | null;
  date: string | null;
  author: {
    name: string | null;
    picture: null;
  } | null;
  category: "Competition" | "Meetup" | "Talk" | "Workshop" | null;
  venue: string | null;
  registrationLink: string | null;
}>;
// Variable: eventSlugsQuery
// Query: *[_type == "event" && defined(slug.current)]{ "slug": slug.current }
export type EventSlugsQueryResult = Array<{
  slug: string | null;
}>;
// Variable: galleryItemsQuery
// Query: *[_type == "gallery"] | order(date desc, _updatedAt desc) {    _id,    title,    "imageUrl": mainImage.asset->url,    description,    tags,    date,    author-> {      name,      "picture": picture.asset->url    },    category  }
export type GalleryItemsQueryResult = Array<{
  _id: string;
  title: string | null;
  imageUrl: string | null;
  description: string | null;
  tags: Array<string> | null;
  date: string | null;
  author: {
    name: string | null;
    picture: null;
  } | null;
  category: "Activities" | "Competitions" | "Hackathons" | "Seminars" | "Workshops" | null;
}>;
// Variable: teamMembersQuery
// Query: *[_type == "teamMember"] | order(year desc, category asc, order asc, name asc) {    _id,    name,    role,    "image": image.asset->url,    email,    linkedin,    github,    year,    category,    order  }
export type TeamMembersQueryResult = Array<{
  _id: string;
  name: string | null;
  role: string | null;
  image: string | null;
  email: string | null;
  linkedin: string | null;
  github: string | null;
  year: "2024" | "2025" | "2026" | null;
  category: "core" | "junior" | null;
  order: number | null;
}>;
// Variable: teamMembersByYearQuery
// Query: *[_type == "teamMember" && year == $year] | order(category asc, order asc, name asc) {    _id,    name,    role,    "image": image.asset->url,    email,    linkedin,    github,    year,    category,    order  }
export type TeamMembersByYearQueryResult = Array<{
  _id: string;
  name: string | null;
  role: string | null;
  image: string | null;
  email: string | null;
  linkedin: string | null;
  github: string | null;
  year: "2024" | "2025" | "2026" | null;
  category: "core" | "junior" | null;
  order: number | null;
}>;
// Variable: teamYearsQuery
// Query: *[_type == "teamMember"] {    year  } | order(year desc)
export type TeamYearsQueryResult = Array<{
  year: "2024" | "2025" | "2026" | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"post\" && slug.current == $slug][0] {\n    _id,\n    title,\n    description,\n    \"coverImage\": mainImage.asset->url,\n    \"date\": publishedAt,\n    author->{name, \"picture\": image.asset->url},\n    \"body\": body[]{..., _type == \"image\" => {\"url\": asset->url}},\n    \"slug\": slug.current,\n    \"tags\": tags,\n  }\n": PostQueryResult;
    "\n  *[_type == \"post\" && _id != $skip && defined(slug.current)] | order(publishedAt desc, _updatedAt desc) [0...$limit] {\n    title,\n    \"slug\": slug.current,\n    \"imageUrl\": mainImage.asset->url,\n    \"date\": publishedAt,\n    author->{name, \"picture\": image.asset->url},\n    \"description\": description,\n    \"tags\": tags,\n  }\n": MoreBlogsQueryResult;
    "\n*[_type == \"post\" && defined(slug.current)] | order(publishedAt desc, _updatedAt desc) {\n  _id,\n  title,\n  description,\n  \"slug\": slug.current,\n  \"tags\": tags,\n  \"date\": publishedAt,\n  author->{name},\n  \"imageUrl\": mainImage.asset->url,\n}": PostsQueryResult;
    "*[_type == \"post\" && defined(slug.current)]{ \"slug\": slug.current }": PostSlugsQueryResult;
    "\n  *[_type == \"project\" && slug.current == $slug][0] {\n    _id,\n    title,\n    description,\n    \"coverImage\": mainImage.asset->url,\n    \"date\": publishedAt,\n    author->{name, \"picture\": image.asset->url},\n    \"body\": body[]{..., _type == \"image\" => {\"url\": asset->url}},\n    \"slug\": slug.current,\n    \"tags\": tags,\n    githubUrl,\n    liveUrl\n  }\n": ProjectQueryResult;
    "\n  *[_type == \"project\" && _id != $skip && defined(slug.current)] | order(publishedAt desc, _updatedAt desc) [0...$limit] {\n    title,\n    \"slug\": slug.current,\n    \"imageUrl\": mainImage.asset->url,\n    \"date\": publishedAt,\n    author->{name, \"picture\": image.asset->url},\n    \"description\": description,\n    \"tags\": tags,\n  }\n": MoreProjectsQueryResult;
    "\n*[_type == \"project\" && defined(slug.current)] | order(publishedAt desc, _updatedAt desc) {\n  _id,\n  title,\n  description,\n  \"slug\": slug.current,\n  \"tags\": tags,\n  \"date\": publishedAt,\n  author->{name},\n  \"imageUrl\": mainImage.asset->url,\n}": ProjectsQueryResult;
    "*[_type == \"project\" && defined(slug.current)]{ \"slug\": slug.current }": ProjectSlugsQueryResult;
    "\n  *[_type == \"event\" && slug.current == $slug][0] {\n    _id,\n    title,\n    description,\n    \"slug\": slug.current,\n    author-> {\n      name,\n      \"picture\": picture.asset->url\n    },\n    \"imageUrl\": mainImage.asset->url,\n    category,\n    tags,\n    date,\n    venue,\n    registrationLink,\n    body,\n    publishedAt\n  }\n": EventQueryResult;
    "\n  *[_type == \"event\" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\n    _id,\n    title,\n    \"slug\": slug.current,\n    \"imageUrl\": mainImage.asset->url,\n    description,\n    date,\n    author-> {\n      name,\n      \"picture\": picture.asset->url\n    }\n  }\n": MoreEventsQueryResult;
    "\n  *[_type == \"event\" && defined(slug.current)] | order(date desc, _updatedAt desc) {\n    _id,\n    title,\n    \"slug\": slug.current,\n    \"imageUrl\": mainImage.asset->url,\n    description,\n    tags,\n    date,\n    author-> {\n      name,\n      \"picture\": picture.asset->url\n    },\n    category,\n    venue,\n    registrationLink\n  }\n": EventsQueryResult;
    "*[_type == \"event\" && defined(slug.current)]{ \"slug\": slug.current }": EventSlugsQueryResult;
    "\n  *[_type == \"gallery\"] | order(date desc, _updatedAt desc) {\n    _id,\n    title,\n    \"imageUrl\": mainImage.asset->url,\n    description,\n    tags,\n    date,\n    author-> {\n      name,\n      \"picture\": picture.asset->url\n    },\n    category\n  }\n": GalleryItemsQueryResult;
    "\n  *[_type == \"teamMember\"] | order(year desc, category asc, order asc, name asc) {\n    _id,\n    name,\n    role,\n    \"image\": image.asset->url,\n    email,\n    linkedin,\n    github,\n    year,\n    category,\n    order\n  }\n": TeamMembersQueryResult;
    "\n  *[_type == \"teamMember\" && year == $year] | order(category asc, order asc, name asc) {\n    _id,\n    name,\n    role,\n    \"image\": image.asset->url,\n    email,\n    linkedin,\n    github,\n    year,\n    category,\n    order\n  }\n": TeamMembersByYearQueryResult;
    "\n  *[_type == \"teamMember\"] {\n    year\n  } | order(year desc)\n": TeamYearsQueryResult;
  }
}
